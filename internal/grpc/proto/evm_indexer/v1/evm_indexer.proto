syntax = "proto3";

package evm_indexer.v1;

option go_package = "github.com/evmi-cloud/go-evm-indexer/gen/evm-indexer/v1;evm_indexer";

message LogSource {
    string name = 1;
    string type = 2;
    repeated LogSourceContract contracts = 3;
    string topic = 4;
    uint64 start_block = 5;
    uint64 latest_block_indexed = 6;
}

message LogSourceContract {
    string address = 1;
    string contract_name = 2;
}

message LogStoreStatus {
    string status = 1;
    uint64 latest_block_indexed = 2;
}

message EvmMetadata {
    string contract_name = 1;
    string event_name = 2;
    string function_name = 3;
    map<string, string> data = 4;
}

message EvmLog {
    string address = 1;
    repeated string topics = 2;
    string data = 3;
    uint64 block_number = 4;
    string transaction_hash = 5;
    uint64 transaction_index = 6;
    string block_hash = 7;
    uint64 log_index = 8;
    bool removed = 9;
    uint64 minted_at = 10;

    optional EvmMetadata metadata = 11;
}

message LogStore {
  string id = 1;
  string identifier = 2;
  string description = 3;
  string rpc_url = 5;
  string status = 6;
  uint64 chainId = 7;

  repeated LogSource sources = 8;
}

message GetStoresRequest {
}

message GetStoresResponse {
  bool success = 1;
  string error = 2;
  repeated LogStore stores = 3;
}

message StartPipelineRequest {
    string id = 1;
}

message StartPipelineResponse {
  bool success = 1;
  string error = 2;
}

message StopPipelineRequest {
    string id = 1;
}

message StopPipelineResponse {
  bool success = 1;
  string error = 2;
}

message GetStoreLogsRequest {
    string id = 1;

    uint64 from_block = 2;
    uint64 to_block = 3;
    uint64 limit = 4;
    uint64 offset = 5;
}

message GetStoreLogsResponse {
  bool success = 1;
  string error = 2;
  repeated EvmLog logs= 3;
}

message GetLatestStoreLogsRequest {
    string id = 1;

    uint64 limit = 2;
}

message GetLatestStoreLogsResponse {
  bool success = 1;
  string error = 2;
  repeated EvmLog logs= 3;
}

message GetStoreLogsStreamRequest {
    string id = 1;

    uint64 from_block = 2;
    bool to_latest = 3;
    uint64 to_block = 4;
    uint64 batch_size = 5;
}

message GetStoreLogsStreamResponse {
  repeated EvmLog logs = 3;
}

message RefetchPipelineBlockRangeRequest {
    string id = 1;

    uint64 from_block = 2;
}

message RefetchPipelineBlockRangeResponse {
    bool success = 1;
    string error = 2;
}

service EvmIndexerService {
  rpc GetStores(GetStoresRequest) returns (GetStoresResponse) {}

  rpc StartPipeline(StartPipelineRequest) returns (StartPipelineResponse) {}
  rpc StopPipeline(StopPipelineRequest) returns (StopPipelineResponse) {}
  
  rpc GetStoreLogs(GetStoreLogsRequest) returns (GetStoreLogsResponse) {} 
  rpc GetLatestsStoreLogs(GetLatestStoreLogsRequest) returns (GetLatestStoreLogsResponse) {} 
  rpc GetStoreLogStream(GetStoreLogsStreamRequest) returns (stream GetStoreLogsStreamResponse) {}
}