// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: evm_indexer/v1/evm_indexer.proto

package evm_indexerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/evmi-cloud/go-evm-indexer/internal/grpc/generated/evm_indexer/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EvmIndexerServiceName is the fully-qualified name of the EvmIndexerService service.
	EvmIndexerServiceName = "evm_indexer.v1.EvmIndexerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EvmIndexerServiceGetStoresProcedure is the fully-qualified name of the EvmIndexerService's
	// GetStores RPC.
	EvmIndexerServiceGetStoresProcedure = "/evm_indexer.v1.EvmIndexerService/GetStores"
	// EvmIndexerServiceStartPipelineProcedure is the fully-qualified name of the EvmIndexerService's
	// StartPipeline RPC.
	EvmIndexerServiceStartPipelineProcedure = "/evm_indexer.v1.EvmIndexerService/StartPipeline"
	// EvmIndexerServiceStopPipelineProcedure is the fully-qualified name of the EvmIndexerService's
	// StopPipeline RPC.
	EvmIndexerServiceStopPipelineProcedure = "/evm_indexer.v1.EvmIndexerService/StopPipeline"
	// EvmIndexerServiceGetStoreLogsProcedure is the fully-qualified name of the EvmIndexerService's
	// GetStoreLogs RPC.
	EvmIndexerServiceGetStoreLogsProcedure = "/evm_indexer.v1.EvmIndexerService/GetStoreLogs"
	// EvmIndexerServiceGetLatestsStoreLogsProcedure is the fully-qualified name of the
	// EvmIndexerService's GetLatestsStoreLogs RPC.
	EvmIndexerServiceGetLatestsStoreLogsProcedure = "/evm_indexer.v1.EvmIndexerService/GetLatestsStoreLogs"
	// EvmIndexerServiceGetStoreLogStreamProcedure is the fully-qualified name of the
	// EvmIndexerService's GetStoreLogStream RPC.
	EvmIndexerServiceGetStoreLogStreamProcedure = "/evm_indexer.v1.EvmIndexerService/GetStoreLogStream"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	evmIndexerServiceServiceDescriptor                   = v1.File_evm_indexer_v1_evm_indexer_proto.Services().ByName("EvmIndexerService")
	evmIndexerServiceGetStoresMethodDescriptor           = evmIndexerServiceServiceDescriptor.Methods().ByName("GetStores")
	evmIndexerServiceStartPipelineMethodDescriptor       = evmIndexerServiceServiceDescriptor.Methods().ByName("StartPipeline")
	evmIndexerServiceStopPipelineMethodDescriptor        = evmIndexerServiceServiceDescriptor.Methods().ByName("StopPipeline")
	evmIndexerServiceGetStoreLogsMethodDescriptor        = evmIndexerServiceServiceDescriptor.Methods().ByName("GetStoreLogs")
	evmIndexerServiceGetLatestsStoreLogsMethodDescriptor = evmIndexerServiceServiceDescriptor.Methods().ByName("GetLatestsStoreLogs")
	evmIndexerServiceGetStoreLogStreamMethodDescriptor   = evmIndexerServiceServiceDescriptor.Methods().ByName("GetStoreLogStream")
)

// EvmIndexerServiceClient is a client for the evm_indexer.v1.EvmIndexerService service.
type EvmIndexerServiceClient interface {
	GetStores(context.Context, *connect.Request[v1.GetStoresRequest]) (*connect.Response[v1.GetStoresResponse], error)
	StartPipeline(context.Context, *connect.Request[v1.StartPipelineRequest]) (*connect.Response[v1.StartPipelineResponse], error)
	StopPipeline(context.Context, *connect.Request[v1.StopPipelineRequest]) (*connect.Response[v1.StopPipelineResponse], error)
	GetStoreLogs(context.Context, *connect.Request[v1.GetStoreLogsRequest]) (*connect.Response[v1.GetStoreLogsResponse], error)
	GetLatestsStoreLogs(context.Context, *connect.Request[v1.GetLatestStoreLogsRequest]) (*connect.Response[v1.GetLatestStoreLogsResponse], error)
	GetStoreLogStream(context.Context, *connect.Request[v1.GetStoreLogsStreamRequest]) (*connect.ServerStreamForClient[v1.GetStoreLogsStreamResponse], error)
}

// NewEvmIndexerServiceClient constructs a client for the evm_indexer.v1.EvmIndexerService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEvmIndexerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EvmIndexerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &evmIndexerServiceClient{
		getStores: connect.NewClient[v1.GetStoresRequest, v1.GetStoresResponse](
			httpClient,
			baseURL+EvmIndexerServiceGetStoresProcedure,
			connect.WithSchema(evmIndexerServiceGetStoresMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startPipeline: connect.NewClient[v1.StartPipelineRequest, v1.StartPipelineResponse](
			httpClient,
			baseURL+EvmIndexerServiceStartPipelineProcedure,
			connect.WithSchema(evmIndexerServiceStartPipelineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stopPipeline: connect.NewClient[v1.StopPipelineRequest, v1.StopPipelineResponse](
			httpClient,
			baseURL+EvmIndexerServiceStopPipelineProcedure,
			connect.WithSchema(evmIndexerServiceStopPipelineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStoreLogs: connect.NewClient[v1.GetStoreLogsRequest, v1.GetStoreLogsResponse](
			httpClient,
			baseURL+EvmIndexerServiceGetStoreLogsProcedure,
			connect.WithSchema(evmIndexerServiceGetStoreLogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getLatestsStoreLogs: connect.NewClient[v1.GetLatestStoreLogsRequest, v1.GetLatestStoreLogsResponse](
			httpClient,
			baseURL+EvmIndexerServiceGetLatestsStoreLogsProcedure,
			connect.WithSchema(evmIndexerServiceGetLatestsStoreLogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStoreLogStream: connect.NewClient[v1.GetStoreLogsStreamRequest, v1.GetStoreLogsStreamResponse](
			httpClient,
			baseURL+EvmIndexerServiceGetStoreLogStreamProcedure,
			connect.WithSchema(evmIndexerServiceGetStoreLogStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// evmIndexerServiceClient implements EvmIndexerServiceClient.
type evmIndexerServiceClient struct {
	getStores           *connect.Client[v1.GetStoresRequest, v1.GetStoresResponse]
	startPipeline       *connect.Client[v1.StartPipelineRequest, v1.StartPipelineResponse]
	stopPipeline        *connect.Client[v1.StopPipelineRequest, v1.StopPipelineResponse]
	getStoreLogs        *connect.Client[v1.GetStoreLogsRequest, v1.GetStoreLogsResponse]
	getLatestsStoreLogs *connect.Client[v1.GetLatestStoreLogsRequest, v1.GetLatestStoreLogsResponse]
	getStoreLogStream   *connect.Client[v1.GetStoreLogsStreamRequest, v1.GetStoreLogsStreamResponse]
}

// GetStores calls evm_indexer.v1.EvmIndexerService.GetStores.
func (c *evmIndexerServiceClient) GetStores(ctx context.Context, req *connect.Request[v1.GetStoresRequest]) (*connect.Response[v1.GetStoresResponse], error) {
	return c.getStores.CallUnary(ctx, req)
}

// StartPipeline calls evm_indexer.v1.EvmIndexerService.StartPipeline.
func (c *evmIndexerServiceClient) StartPipeline(ctx context.Context, req *connect.Request[v1.StartPipelineRequest]) (*connect.Response[v1.StartPipelineResponse], error) {
	return c.startPipeline.CallUnary(ctx, req)
}

// StopPipeline calls evm_indexer.v1.EvmIndexerService.StopPipeline.
func (c *evmIndexerServiceClient) StopPipeline(ctx context.Context, req *connect.Request[v1.StopPipelineRequest]) (*connect.Response[v1.StopPipelineResponse], error) {
	return c.stopPipeline.CallUnary(ctx, req)
}

// GetStoreLogs calls evm_indexer.v1.EvmIndexerService.GetStoreLogs.
func (c *evmIndexerServiceClient) GetStoreLogs(ctx context.Context, req *connect.Request[v1.GetStoreLogsRequest]) (*connect.Response[v1.GetStoreLogsResponse], error) {
	return c.getStoreLogs.CallUnary(ctx, req)
}

// GetLatestsStoreLogs calls evm_indexer.v1.EvmIndexerService.GetLatestsStoreLogs.
func (c *evmIndexerServiceClient) GetLatestsStoreLogs(ctx context.Context, req *connect.Request[v1.GetLatestStoreLogsRequest]) (*connect.Response[v1.GetLatestStoreLogsResponse], error) {
	return c.getLatestsStoreLogs.CallUnary(ctx, req)
}

// GetStoreLogStream calls evm_indexer.v1.EvmIndexerService.GetStoreLogStream.
func (c *evmIndexerServiceClient) GetStoreLogStream(ctx context.Context, req *connect.Request[v1.GetStoreLogsStreamRequest]) (*connect.ServerStreamForClient[v1.GetStoreLogsStreamResponse], error) {
	return c.getStoreLogStream.CallServerStream(ctx, req)
}

// EvmIndexerServiceHandler is an implementation of the evm_indexer.v1.EvmIndexerService service.
type EvmIndexerServiceHandler interface {
	GetStores(context.Context, *connect.Request[v1.GetStoresRequest]) (*connect.Response[v1.GetStoresResponse], error)
	StartPipeline(context.Context, *connect.Request[v1.StartPipelineRequest]) (*connect.Response[v1.StartPipelineResponse], error)
	StopPipeline(context.Context, *connect.Request[v1.StopPipelineRequest]) (*connect.Response[v1.StopPipelineResponse], error)
	GetStoreLogs(context.Context, *connect.Request[v1.GetStoreLogsRequest]) (*connect.Response[v1.GetStoreLogsResponse], error)
	GetLatestsStoreLogs(context.Context, *connect.Request[v1.GetLatestStoreLogsRequest]) (*connect.Response[v1.GetLatestStoreLogsResponse], error)
	GetStoreLogStream(context.Context, *connect.Request[v1.GetStoreLogsStreamRequest], *connect.ServerStream[v1.GetStoreLogsStreamResponse]) error
}

// NewEvmIndexerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEvmIndexerServiceHandler(svc EvmIndexerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	evmIndexerServiceGetStoresHandler := connect.NewUnaryHandler(
		EvmIndexerServiceGetStoresProcedure,
		svc.GetStores,
		connect.WithSchema(evmIndexerServiceGetStoresMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evmIndexerServiceStartPipelineHandler := connect.NewUnaryHandler(
		EvmIndexerServiceStartPipelineProcedure,
		svc.StartPipeline,
		connect.WithSchema(evmIndexerServiceStartPipelineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evmIndexerServiceStopPipelineHandler := connect.NewUnaryHandler(
		EvmIndexerServiceStopPipelineProcedure,
		svc.StopPipeline,
		connect.WithSchema(evmIndexerServiceStopPipelineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evmIndexerServiceGetStoreLogsHandler := connect.NewUnaryHandler(
		EvmIndexerServiceGetStoreLogsProcedure,
		svc.GetStoreLogs,
		connect.WithSchema(evmIndexerServiceGetStoreLogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evmIndexerServiceGetLatestsStoreLogsHandler := connect.NewUnaryHandler(
		EvmIndexerServiceGetLatestsStoreLogsProcedure,
		svc.GetLatestsStoreLogs,
		connect.WithSchema(evmIndexerServiceGetLatestsStoreLogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evmIndexerServiceGetStoreLogStreamHandler := connect.NewServerStreamHandler(
		EvmIndexerServiceGetStoreLogStreamProcedure,
		svc.GetStoreLogStream,
		connect.WithSchema(evmIndexerServiceGetStoreLogStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/evm_indexer.v1.EvmIndexerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EvmIndexerServiceGetStoresProcedure:
			evmIndexerServiceGetStoresHandler.ServeHTTP(w, r)
		case EvmIndexerServiceStartPipelineProcedure:
			evmIndexerServiceStartPipelineHandler.ServeHTTP(w, r)
		case EvmIndexerServiceStopPipelineProcedure:
			evmIndexerServiceStopPipelineHandler.ServeHTTP(w, r)
		case EvmIndexerServiceGetStoreLogsProcedure:
			evmIndexerServiceGetStoreLogsHandler.ServeHTTP(w, r)
		case EvmIndexerServiceGetLatestsStoreLogsProcedure:
			evmIndexerServiceGetLatestsStoreLogsHandler.ServeHTTP(w, r)
		case EvmIndexerServiceGetStoreLogStreamProcedure:
			evmIndexerServiceGetStoreLogStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEvmIndexerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEvmIndexerServiceHandler struct{}

func (UnimplementedEvmIndexerServiceHandler) GetStores(context.Context, *connect.Request[v1.GetStoresRequest]) (*connect.Response[v1.GetStoresResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("evm_indexer.v1.EvmIndexerService.GetStores is not implemented"))
}

func (UnimplementedEvmIndexerServiceHandler) StartPipeline(context.Context, *connect.Request[v1.StartPipelineRequest]) (*connect.Response[v1.StartPipelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("evm_indexer.v1.EvmIndexerService.StartPipeline is not implemented"))
}

func (UnimplementedEvmIndexerServiceHandler) StopPipeline(context.Context, *connect.Request[v1.StopPipelineRequest]) (*connect.Response[v1.StopPipelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("evm_indexer.v1.EvmIndexerService.StopPipeline is not implemented"))
}

func (UnimplementedEvmIndexerServiceHandler) GetStoreLogs(context.Context, *connect.Request[v1.GetStoreLogsRequest]) (*connect.Response[v1.GetStoreLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("evm_indexer.v1.EvmIndexerService.GetStoreLogs is not implemented"))
}

func (UnimplementedEvmIndexerServiceHandler) GetLatestsStoreLogs(context.Context, *connect.Request[v1.GetLatestStoreLogsRequest]) (*connect.Response[v1.GetLatestStoreLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("evm_indexer.v1.EvmIndexerService.GetLatestsStoreLogs is not implemented"))
}

func (UnimplementedEvmIndexerServiceHandler) GetStoreLogStream(context.Context, *connect.Request[v1.GetStoreLogsStreamRequest], *connect.ServerStream[v1.GetStoreLogsStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("evm_indexer.v1.EvmIndexerService.GetStoreLogStream is not implemented"))
}
